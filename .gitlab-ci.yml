stages:
  - test
  - docker
  - build
  - analysis

services:
  - mysql:5.7

image: php:7.2

before_script:
  - ping repo.packagist.org -c 4
  - curl -sS https://getcomposer.org/installer | php
  - php composer.phar install
  - docker-php-ext-install pdo_mysql
  - cp .env.testing .env
  - php artisan key:generate --env=testing
  - php artisan migrate -v --env=testing

variables:
  MYSQL_ROOT_PASSWORD: secret
  MYSQL_DATABASE: my_cic_test
  MYSQL_ROOT_HOST: localhost
  MYSQL_USER: user
  MYSQL_PASSWORD: secret

  DB_DATABASE: my_cic_test
  DB_HOST: localhost
  DB_USERNAME: root
  DB_PASSWORD: secret

build:
  image: node:latest
  stage: build
  tags:
    - mycic
  script:
    - echo npm i
    - echo npm run dev

phpunit:
  image: registry-backend.cic.kz/centras/php-fpm:7.2
  stage: test
  tags:
    - mycic
  script:
    - phpunit --coverage-text --colors=never --log-junit report.xml

  artifacts:
    when: always
    reports:
      junit: report.xml

phploc:
  image: registry-backend.cic.kz/centras/php-fpm:7.2
  stage: analysis

  script:
      - wget https://phar.phpunit.de/phploc.phar
      - php phploc.phar app


# cq:
#   image: registry-backend.cic.kz/centras/php-fpm:7.3
#   stage: analysis
#   tags:
#     - mycic
#   script:
#     - apt-get install -y ant default-jre
#     - wget https://getcomposer.org/composer.phar -O ./composer.phar
#     - php composer.phar update
#     - cp .env.testing .env
#     - php artisan key:generate
#     - php composer.phar require --dev phpcq/all-tasks
#     - echo '<?xml version="1.0" encoding="UTF-8"?> <project name="my-project" default="build" description="Automated # build of my project"><import file="vendor/phpcq/phpcq/phpcq.main.xml" /> </project>' > build.xml
#     - ./vendor/bin/phing -keep-going
#   artifacts:
#     expire_in: 30 days
#     paths:
#       - vendor/
#       - node_modules/
#       - .env
#   cache:
#     key: ${CI_COMMIT_REF_SLUG}-composer
#     paths:
#       - vendor/
#       - node_modules/


build-docker:
  stage: docker
  only:
    - colleagues
  # https://www.cloudsigma.com/deploying-laravel-nginx-and-mysql-with-docker-compose/
  script: |
    docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    docker build --cache-from $CI_REGISTRY_IMAGE:master --tag $CI_REGISTRY_IMAGE:master .
    docker push $CI_REGISTRY_IMAGE:master
    docker rmi $CI_REGISTRY_IMAGE:master
